<?php/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *	Copyright(C) 2013 by Andreas Bank, andreas.mikael.bank@gmail.com * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */class AxisTelnet {	private $mySocket = null;	private $loginPrompt = null;	private $errno = 0;	private $errstr = "";		public function connect($server, $user, $pass) {		$returnValue = 0;		if (strlen($server)) {			if (preg_match('/[^0-9.]/',$server)) {				$ip = gethostbyname($server);				if ($ip == $server) {					$ip = '';					$returnValue = 2;				}			} else $ip = $server;		} else $ip = '127.0.0.1';		if (strlen($ip)) {			if ($this->mySocket = @fsockopen($ip, 23, $errno, $errstr, 10)) {				//SCREW THE HEADERS! IT WORKS!				sleep(1);				$this->Read($r);				$r = explode("\n", $r);				$this->loginPrompt = $r[count($r)-1];				fputs($this->mySocket, $user."\r");				sleep(5);				fputs($this->mySocket, $pass."\r");				sleep(2);				$this->Read($r);				$r=explode("\n", $r);				if (($r[count($r)-1] == '') || ($this->loginPrompt == $r[count($r)-1])) {					$returnValue=3;					$this->Disconnect();				}			} else $returnValue = 1;		}				if ($returnValue) {			throw new Exception($this->getErrorMessage($returnValue), $returnValue);		}		return $returnValue;	}		public function disconnect($exit = 1) {		if ($this->mySocket) {			if ($exit) $this->Write('exit', $nowhere);			fclose($this->mySocket);			$this->mySocket = null;		}	}	public function write($c,&$r) {		if ($this->mySocket) {			fputs($this->mySocket, $c."\r");			sleep(2);			$this->Read($r);			$r = preg_replace("/^.*?\n(.*)\n[^\n]*$/","$1",$r);		}		return $this->mySocket?1:0;	}		public function read(&$r) {		$r='';		do {			$s = socket_get_status($this->mySocket);			$r .= fread($this->mySocket, 15000); // ~15KB			$s = socket_get_status($this->mySocket);		} while ($s['unread_bytes']);	}		public function getErrorMessage($num) {		switch ($num) {			case 1:				return "Unable to open network connection.<br />\n(fsockopen: [code: ".$this->errno.", string: ".$this->errstr."])";				break;			case 2:				return "Unknown host.";				break;			case 3:				return "Login failed.";				break;			default:				return "Unknown error.";		}	}	public function isConnected() {		if($this->mySocket != null)			return true;		return false;	}}?>