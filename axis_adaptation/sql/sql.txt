
  Manually configure MySQL:
  ----------------


  CREATE DATABASE `abused`;

  CREATE TABLE `capabilities` (`id` INT NOT NULL AUTO_INCREMENT,
                               `name` VARCHAR(255) NOT NULL UNIQUE,
                               PRIMARY KEY(`id`)) ENGINE=InnoDB;

  CREATE TABLE `model_firmware` (`id` INT NOT NULL AUTO_INCREMENT,
                                 `model_name` VARCHAR(255) NOT NULL,
                                 `firmware_version` VARCHAR(255) NOT NULL,
                                 `last_updated` DATETIME,
                                 UNIQUE KEY(`model_name`, `firmware_version`),
                                 PRIMARY KEY(`id`)) ENGINE=InnoDB;

  CREATE TABLE `model_firmware_capability` (`model_firmware_id` INT NOT NULL,
                                            `capability_id` INT NOT NULL,
                                            FOREIGN KEY (`model_firmware_id`)
                                              REFERENCES `model_firmware`(`id`)
                                              ON DELETE CASCADE,
                                            FOREIGN KEY (`capability_id`)
                                              REFERENCES `capabilities`(`id`)
                                              ON DELETE CASCADE,
                                            PRIMARY KEY(`model_firmware_id`, `capability_id`)) ENGINE=InnoDB;

  CREATE TABLE `devices` (`id` VARCHAR(255) NOT NULL,
                          `mac` VARCHAR(255) NOT NULL,
                          `ipv4` VARCHAR(15),
                          `ipv6` VARCHAR(46),
                          `friendly_name` VARCHAR(255),
                          `model_firmware_id` INT NULL,
                          `last_update` DATETIME NOT NULL,
                          `last_upnp_message` ENUM('hello', 'alive', 'bye') NOT NULL,
                          FOREIGN KEY (`model_firmware_id`)
                            REFERENCES `model_firmware` (`id`)
                            ON DELETE SET NULL,
                          PRIMARY KEY (`id`)) ENGINE=InnoDB;

  CREATE TABLE `model_firmware_capability_state` (`device_id` VARCHAR(255) NOT NULL,
                                                  `capability_id` INT NOT NULL,
                                                  `state` VARCHAR(255) NOT NULL,
                                                  FOREIGN KEY (`device_id`)
                                                    REFERENCES `devices` (`id`)
                                                    ON DELETE CASCADE,
                                                  FOREIGN KEY (`capability_id`)
                                                    REFERENCES `model_firmware_capability` (`capability_id`)
                                                    ON DELETE CASCADE,
                                                  PRIMARY KEY (`device_id`, `capability_id`)) ENGINE=InnoDB;

  CREATE TABLE `locked_devices`(`device_id` VARCHAR(255) NOT NULL,
                                `locked` TINYINT(1) DEFAULT 1,
                                `locked_by` VARCHAR(255) NOT NULL,
                                `locked_date` DATETIME NOT NULL,
                                FOREIGN KEY (`device_id`)
                                  REFERENCES `devices`(`id`)
                                  ON DELETE CASCADE
                                  ON UPDATE CASCADE,
                                PRIMARY KEY (`device_id`, `locked_date`)) ENGINE=InnoDB;

  CREATE USER 'abused'@'%' IDENTIFIED BY 'abusedpass';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`capabilities` TO 'abused'@'%';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`model_firmware` TO 'abused'@'%';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`model_firmware_capability` TO 'abused'@'%';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`device_capability_state` TO 'abused'@'%';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`devices` TO 'abused'@'%';

  GRANT SELECT, INSERT, UPDATE ON `abused`.`locked_devices` TO 'abused'@'%';

  DELIMITER //
  CREATE PROCEDURE `add_capability_if_not_exist`(IN `v_capability_name` VARCHAR(255))
    SQL SECURITY INVOKER
  BEGIN
      DECLARE found_id INT DEFAULT NULL;
      SELECT `id` INTO found_id
        FROM `capabilities`
        WHERE `name`=v_capability_name;
      IF found_id IS NULL THEN
        INSERT INTO `capabilities` (`name`)
        VALUES(v_capability_name);
      END IF;
      SELECT `id`
      FROM `capabilities`
      WHERE `name`=v_capability_name;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `add_or_update_device`(IN `v_id` VARCHAR(255),
                                          IN `v_mac` VARCHAR(17),
                                          IN `v_ipv4` VARCHAR(15),
                                          IN `v_ipv6` VARCHAR(46),
                                          IN `v_friendly_name` VARCHAR(255),
                                          IN `v_model_firmware_id` INT,
                                          IN `v_last_upnp_message` VARCHAR(5))
    SQL SECURITY INVOKER
  BEGIN
    INSERT INTO `devices` VALUES(v_id,
                                 v_mac,
                                 v_ipv4,
                                 v_ipv6,
                                 v_friendly_name,
                                 v_model_firmware_id,
                                 NOW(),
                                 v_last_upnp_message)
      ON DUPLICATE KEY UPDATE
        `mac`=v_mac,
        `ipv4`=v_ipv4,
        `ipv6`=v_ipv6,
        `friendly_name`=v_friendly_name,
        `model_firmware_id`=v_model_firmware_id,
        `last_update`=NOW(),
        `last_upnp_message`=v_last_upnp_message;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `add_model_firmware_if_not_exist`(IN `v_model_name` VARCHAR(255),
                                        IN `v_firmware_version` VARCHAR(255))
    SQL SECURITY INVOKER
  BEGIN
    DECLARE found_id INT DEFAULT NULL;
    SELECT `id` INTO found_id
    FROM `model_firmware`
    WHERE `model_name`=v_model_name
    AND `firmware_version`=v_firmware_version;
    IF found_id IS NULL THEN
      INSERT INTO `model_firmware` (`model_name`, `firmware_version`, `last_updated`)
      VALUES(v_model_name, v_firmware_version, NOW());
    END IF;
    SELECT `id`
    FROM `model_firmware`
    WHERE `model_name`=v_model_name
    AND `firmware_version`=v_firmware_version;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `is_model_firmware_probed`(IN `v_model_firmware_id` INT)
    SQL SECURITY INVOKER
  BEGIN
    DECLARE v_count INT DEFAULT 0;
    SELECT COUNT(*) INTO v_count
    FROM `model_firmware_capability`
    WHERE `model_firmware_id`=v_model_firmware_id;
    IF v_count > 0 THEN
      SELECT 'yes' AS `probed`;
    ELSE
      SELECT 'no' AS `probed`;
    END IF;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `add_capability_to_model_firmware` (IN `v_model_firmware_id` INT,
                                                       IN `v_capability_id` INT)
    SQL SECURITY INVOKER
  BEGIN
    INSERT INTO `model_firmware_capability`
    VALUES (
      v_model_firmware_id, v_capability_id
    ) ON DUPLICATE KEY UPDATE `model_firmware_id` = `model_firmware_id`;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `delete_inactive_devices`(IN `inactive_seconds` INT)
    SQL SECURITY INVOKER
  BEGIN
    DELETE FROM `devices`
      WHERE `last_update`<(SELECT NOW()-INTERVAL inactive_seconds SECOND);
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `is_device_locked_internal`(IN `v_device_id` VARCHAR(255),
                                               INOUT `is_locked` TINYINT(1))
    SQL SECURITY INVOKER
  BEGIN
    SELECT `locked` INTO is_locked
      FROM `locked_devices`
      WHERE `device_id`=v_device_id
        AND `locked`=1;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE FUNCTION `compare_version_strings`(`s_ver` VARCHAR(255), `d_ver` VARCHAR(255)) RETURNS tinyint(2)
    SQL SECURITY INVOKER
  BEGIN
    DECLARE s_field VARCHAR(255) DEFAULT '';
    DECLARE d_field VARCHAR(255) DEFAULT '';
    DECLARE s_rest VARCHAR(255) DEFAULT '';
    DECLARE d_rest VARCHAR(255) DEFAULT '';
    DECLARE loop_index INT DEFAULT 0;
    DECLARE nr_s_fields INT DEFAULT 0;
    DECLARE nr_d_fields INT DEFAULT 0;
    DECLARE cmp_result INT DEFAULT 0;
    SET nr_s_fields = CHAR_LENGTH(s_ver) - CHAR_LENGTH(REPLACE(s_ver, '.', '')) + 1;
    SET nr_d_fields = CHAR_LENGTH(d_ver) - CHAR_LENGTH(REPLACE(d_ver, '.', '')) + 1;
  
    SET s_rest = s_ver;
    SET d_rest = d_ver;
  
  WHILE loop_index < nr_s_fields DO
      SET loop_index = loop_index + 1;
  
      SET s_field = SUBSTRING_INDEX(s_rest, '.', 1);
      SET s_field = LPAD(s_field, 6, '0');
      SET d_field = SUBSTRING_INDEX(d_rest, '.', 1);
      SET d_field = LPAD(d_field, 6, '0');
  
      SET s_rest = SUBSTRING_INDEX(s_rest, '.', loop_index - nr_s_fields);
      SET d_rest = SUBSTRING_INDEX(d_rest, '.', loop_index - nr_d_fields);
  
      SET cmp_result = STRCMP(s_field, d_field);
  
      IF cmp_result < 0 OR cmp_result > 0 THEN
        RETURN cmp_result;
      END IF;
  
    END WHILE;
    RETURN 0;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `lock_device`(IN `v_capability` VARCHAR(255),
                                 IN `v_model_name` VARCHAR(255),
                                 IN `v_firmware_version` VARCHAR(255),
                                 IN `v_capability_state` VARCHAR(255),
                                 IN `v_user` VARCHAR(255),
                                 IN `v_age` INT,
                                 IN `v_device_id` VARCHAR(255))
    SQL SECURITY INVOKER
  DELIMITER ;
  BEGIN
    DECLARE v_found_id VARCHAR(13) DEFAULT NULL;
    IF v_capability IS NULL OR v_capability = '' THEN
      SET v_capability = '%';
    END IF;
    IF v_model_name IS NULL OR v_model_name = '' THEN
      SET v_model_name = '%';
    END IF;
    IF v_firmware_version IS NULL OR v_firmware_version = '' THEN
      SET v_firmware_version = '%';
    END IF;
    IF v_device_id IS NULL OR v_device_id = '' THEN
      SET v_device_id = '%';
    END IF;
    IF v_capability_state IS NULL OR v_capability_state = '' THEN
      SET v_capability_state = '%';
    END IF;
    SELECT d.`id` INTO v_found_id
    FROM `devices` d,
         `model_firmware` mf,
         `model_firmware_capability` mfc,
         `capabilities` c
         LEFT OUTER JOIN `device_capability_state` dcs
         ON dcs.`capability_id` = c.`id`
         AND dcs.`state` LIKE v_capability_state
    WHERE d.`model_firmware_id`=mf.`id`
    AND IF(v_capability_state = '%',
           (dcs.`model_firmware_id` IS NULL
           OR dcs.`model_firmware_id` = d.`model_firmware_id`),
           dcs.`model_firmware_id` = d.`model_firmware_id`)
    AND d.`id` LIKE v_device_id
    AND d.`model_firmware_id`=mfc.`model_firmware_id`
    AND mfc.`capability_id`=c.`id` 
    AND c.`name` LIKE v_capability
    AND mf.`model_name` LIKE v_model_name
    AND mf.`firmware_version` LIKE v_firmware_version
    AND d.`last_update`>(SELECT NOW()-INTERVAL v_age SECOND)
    AND d.`id` NOT IN (
      SELECT ld.`device_id`
      FROM `locked_devices` ld
      WHERE ld.`device_id`=d.`id`
      AND ld.`locked`=1)
    LIMIT 1;
    IF v_found_id IS NOT NULL THEN
      INSERT INTO `locked_devices`
      VALUES(v_found_id, 1, v_user, NOW());
      CALL `list_devices`(NULL, NULL, NULL, NULL, 999999, NULL, v_found_id);
    END IF;
  END//
  DELIMITER ;


  DELIMITER //
  CREATE PROCEDURE `list_devices`(IN `v_capability` VARCHAR(255),
                                  IN `v_model_name` VARCHAR(255),
                                  IN `v_firmware_version` VARCHAR(255),
                                  IN `v_capability_state` VARCHAR(255),
                                  IN `v_age` INT,
                                  IN `v_locked_by` VARCHAR(255),
                                  IN `v_device_id` VARCHAR(255))
    SQL SECURITY INVOKER
  DELIMITER //
  BEGIN
    DECLARE v_firmware_sign TINYINT(2) DEFAULT 0;
    IF v_capability IS NULL OR v_capability = '' THEN
      SET v_capability = '%';
    END IF;
    IF v_model_name IS NULL OR v_model_name = '' THEN
      SET v_model_name = '%';
    END IF;
    IF v_firmware_version IS NULL OR v_firmware_version = '' THEN
      SET v_firmware_version = NULL;
    ELSEIF LOCATE('<', v_firmware_version) = 1 THEN
      SET v_firmware_sign = -1;
      SET v_firmware_version = SUBSTRING(v_firmware_version, 2);
    ELSEIF LOCATE('>', v_firmware_version) = 1 THEN
      SET v_firmware_sign = 1;
      SET v_firmware_version = SUBSTRING(v_firmware_version, 2);
    END IF;
    IF v_age IS NULL OR v_age = '' THEN
      SET v_age = '%';
    END IF;
    IF v_device_id IS NULL OR v_device_id = '' THEN
      SET v_device_id = '%';
    END IF;
    IF v_capability_state IS NULL OR v_capability_state = '' THEN
      SET v_capability_state = '%';
    END IF;
    IF v_ip IS NULL OR v_ip = '' THEN
      SET v_ip = '%';
    END IF;
    DROP TEMPORARY TABLE IF EXISTS `tmp_tbl`;
    CREATE TEMPORARY TABLE IF NOT EXISTS `tmp_tbl` AS (
      SELECT DISTINCT d.`id`,
             d.`ipv4`,
             mf.`model_name`,
             mf.`firmware_version`,
             (SELECT GROUP_CONCAT(CONCAT(c2.`name`, IF(dcs.`state` IS NULL,
                                           '',
                                           CONCAT(' (',
                                                  dcs.`state`,
                                                  ')')))
                      SEPARATOR ', ')
              FROM `model_firmware_capability` mfc2
              LEFT OUTER JOIN `device_capability_state` dcs
              ON mfc2.`capability_id` = dcs.`capability_id`,
                   `capabilities` c2
              WHERE mfc2.`capability_id` = c2.`id`
              AND mfc2.`model_firmware_id` = d.`model_firmware_id`
              AND (dcs.`device_id` = d.`id`
                   OR dcs.`device_id` IS NULL)
              GROUP BY mfc2.`model_firmware_id`
             ) AS `capabilities`,
             d.`last_update`,
             d.`last_upnp_message`,
             ld.`locked_by`,
             ld.`locked_date`
      FROM `devices` d
      LEFT OUTER JOIN `locked_devices` ld
      ON d.`id` = ld.`device_id`
      AND ld.`locked` = 1,
           `model_firmware` mf,
           `model_firmware_capability` mfc,
           `capabilities` c
           LEFT OUTER JOIN `device_capability_state` dcs
           ON dcs.`capability_id` = c.`id`
           AND dcs.`state` LIKE v_capability_state
      WHERE mf.`id` = d.`model_firmware_id`
      AND d.`id` LIKE v_device_id
      AND IF(v_capability_state = '%',
             dcs.`device_id` IS NULL
              OR dcs.`device_id` = d.`id`,
             dcs.`device_id` = d.`id`)
      AND mfc.`model_firmware_id` = d.`model_firmware_id`
      AND mfc.`capability_id` = c.`id`
      AND d.`last_update`>(SELECT NOW()-INTERVAL v_age SECOND)
      AND c.`name` LIKE v_capability
      AND mf.`model_name` LIKE v_model_name
      AND (d.`ipv4` LIKE v_ip OR d.`ipv6` LIKE v_ip)
      AND v_firmware_sign = compare_version_strings(mf.`firmware_version`, v_firmware_version));
    IF v_locked_by IS NOT NULL AND v_locked_by != '' THEN
      SELECT *
      FROM `tmp_tbl` tt
      WHERE tt.`locked_by` LIKE v_locked_by;
    ELSE
      SELECT *
      FROM `tmp_tbl`;
    END IF;
  END//
  DELIMITER ;

  DELIMITER //
  CREATE PROCEDURE `add_or_update_device_capability_state`(IN `v_device_id` VARCHAR(255),
                                                                   IN `v_model_firmware_id` INT,
                                                                   IN `v_capability_id` INT,
                                                                   IN `v_state` VARCHAR(255))
    SQL SECURITY INVOKER
  BEGIN
    DECLARE found_id INT DEFAULT NULL;
    SELECT `device_id` INTO found_id
    FROM `device_capability_state`
    WHERE `device_id` = v_device_id
    AND `capability_id` = v_capability_id;
    IF found_id IS NULL THEN
      INSERT INTO `device_capability_state`
      VALUES (v_device, v_model_firmware_id, v_capability_id, v_state);
    ELSE
      UPDATE `device_capability_state`
      SET `state` = v_state,
          `model_firmware_id` = v_model_firmware_id
      WHERE `device_id` = v_device_id
      AND `capability_id` = v_capability_id;
    END IF;
  END//
  DELIMITER ;

  GRANT EXECUTE ON PROCEDURE abused.add_capability_if_not_exist TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.add_model_firmware_if_not_exist TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.is_model_firmware_probed TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.add_capability_to_model_firmware TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.add_or_update_device_capability_state TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.add_or_update_device TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.is_device_locked TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.delete_inactive_devices TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.is_device_locked_internal TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.lock_device TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.unlock_device TO 'abused'@'%';

  GRANT EXECUTE ON PROCEDURE abused.list_devices TO 'abused'@'%';

